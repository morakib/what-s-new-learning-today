  THE DELIVARY DILEMMA -cf MASHUP
----------------------------------

pair<int,int> a[200001];
for(int i=1;i<=n;i++) cin>>a[i].first;
for(int i=1;i<=n;i++) cin>>a[i].second;
sort(a+1,a+n+1); //pair er sort emne kore
///will check from down and add sum
///using sense that delivery  will come from shop so 
///it's time can be diferent acccpeted
///but i can be available in 2 places same time so 
/// my time will be calculated as sum
while(sum<=a[k].first && k>=1){
			sum+=a[k].second;
			k--;}
ans=min(a[k+1].first,sum);


  POWER SEQUENCE -cf MASHUP
----------------------------
do brute force


  STRING EQUALITY
-----------------
void solve(){
	int n,k;
    	cin>>n>>k;
    	string a,b;
    	cin>>a>>b;
    	int xtra=0;
    	for(int c='a';c<='y';c++){
    		int acnt=0,bcnt=0;
    		for(int i=0;i<n;i++){
    			acnt+=(a[i]==c);
    			bcnt+=(b[i]==c);
    		}
    		if(xtra+acnt<bcnt or (bcnt-acnt)%k!=0){
    			cout<<"No\n";
    			return;
    		}
    		xtra+=(acnt-bcnt);
    	}
    	cout<<"Yes\n";
    	return;
}


    A-GOOD STRING -cf MASHUP
-----------------------------
WILL check bothside
(aaaa)(bb)(c)(d) or (d)(c)(bb)(aaaa)
//among them which one is minimum have to find
int calc(const string &s, char c) {
	if (s.size() == 1) {
		return s[0] != c;
	}
	int mid = s.size() / 2;
	int cntl = calc(string(s.begin(), s.begin() + mid), c + 1);
	cntl += (s.size() / 2) - (count(s.begin() + mid, s.end(), c));
	int cntr = calc(string(s.begin() + mid, s.end()), c + 1);
	cntr += (s.size() / 2) - (count(s.begin(), s.begin() + mid, c));
	return min(cntl, cntr);
}
  ANOTHER APPROACH
------------------
**count function takes begin and end point and the char
**substr takes the length s.substr(starting position, length of substring i need)

int f(string s,char c){
	int n=s.size();
	if(n<2)  return s[0]!=c;
	string s1 = s.substr(0,n/2);
  string s2 = s.substr(n/2,n/2);  
	int p=count(s1.begin(),s1.end(),c);
  int q=count(s2.begin(),s2.end(),c);
	return min(n/2-p+f(s2,c+1),n/2-q+f(s1,c+1));
}
