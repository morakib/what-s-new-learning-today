///////////TREE (SUBTREE SIZE,LEVEL,DFS)
---------------------------------------
const int N=2000006;
vector<int>adj[N];
int par[N],level[N],subtree_sz[N];
void dfs(int child,int parent){
    par[child]=parent;
    subtree_sz[child]=1;
    for(int node:adj[child]){
        level[node]=level[child]+1;
        dfs(node,child);
        subtree_sz[child]+=subtree_sz[node];
    }
}
int main(){
    int n;
    cin>>n;
    for(int i=0;i<n-1;i++){
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    level[1]=0;
    dfs(1,-1);
}


////////DFS 
-----------
const int N=1e5+10;
vector<int> graph[N];
int visited[N];
int level[N];
void bfs(int source){
    queue<int>q;
    q.push(source);
    visited[source]=1;
    while(!q.empty()){
       int current_vertex=q.front();
       q.pop();
       for(int child:graph[current_vertex]){
        if(!visited[child]){
            q.push(child);
            visited[child]=1;
            level[child]=level[current_vertex]+1;}}}}
in main func-->    bfs(1);


//////////DSU(NOT OPTIMIZED)-(AT_LLS2_14-6-23)
---------------------------------------------
void make_set(int n){
    for(int i=1;i<=n;i++){
        parent[i]=i;
        sz[i]=i;
    }
}

int find_set(int u){
    if(parent[u]==u) return u;
    return find_set(parent[u]);
}

void union_set(int u,int v){
    int a=find_set(u);
    int b=find_set(v);
    if(a!=b){
        parent[b]=a;
    }
}


//////////DSU(OPTIMIZED)-(AT_LLS2_14-6-23)
------------------------------------------
void make_set(int n){
    for(int i=1;i<=n;i++){
        parent[i]=i;
        sz[i]=i;
    }
}
int find_set(int u){
    if(parent[u]==u) return u;
    return parent[u]=find_set(parent[u]);    //making all set's representative a single one
}
void union_set(int u,int v){
    int a=find_set(u);
    int b=find_set(v);
    if(sz[a]<sz[b]){
        parent[a]=b;
        sz[b]+=sz[a];
    }else{
        parent[b]=a;
        sz[a]+=sz[b];
    }
}


/////////////////////CF mashup
https://codeforces.com/contest/1772/problem/D
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vll a(n);
        for(int i=0;i<n;i++){
            cin>>a[i];
        }
        int mn=0,mx=int(1e9);
        for(int j=0;j<n-1;j++){
            int x=a[j];
            int y=a[j+1];
            int midL=(x+y)/2;  
            int midR=(x+y+1)/2;
            if(x<y){            //jodi soto theke boro
                mx=min(mx,midL);
            }
            if(x>y){            //jodi boro theke soto
                mn=min(mn,midR);
            }
        }
        if(mn<=mx) cout<<mn<<endl;
        else cout<<-1<<endl;
    }
}
******>iota(ans.begin(), ans.end(), 0); assigns and increases by 1 {0-0,1-1,2-2,3-3,..........}


////////DIGiTAL LOGARITHM CF
----------------------------
***********where order doesn't matter and u need to compare elements ,
***********u can use prority queue,it will compare both and update the queue.
while(!pqa.empty() && !pqb.empty()){    //duitar top elemnt compare korbo ,jekhane order matter kre na use priroty queue
            int x=pqa.top();             
            int y=pqb.top();
            if(x==y){
                pqa.pop();
                pqb.pop();
            }else if(x>y){
                pqa.pop();
                pqa.push(len(x));
                cnt++;

            }else{
                pqb.pop();
                pqb.push(len(y));
                cnt++;
            }
        }


///// PRIME FACTORIZATION 
-------------------------
bool mark[N+5];
vector<ll>primes;
void sieve(){
    memset(mark,true,sizeof(mark));
    mark[0]=0,mark[1]=0,mark[2]=1;
    for(ll i=4;i<=N;i+=2LL){
        mark[i]=0;
    }
    for(ll i=3;i*i<=N;i+=2LL){
        if(mark[i]){
            for(ll j=i*i;j<=N;j+=i){
                mark[j]=0;
            }
        }
    }primes.push_back(2);
    for(int i=3;i<=N;i+=2){
        if(mark[i]){
            primes.push_back(i);
        }
    }
}
// sieve ends**********
        vector<int> a(n);
        for(int i=0;i<n;i++){
            cin>>a[i];
        
        map<ll,int> freq;;
        for(int i=0;i<n;i++){
            int x=a[i];
            for(ll pp=0;primes[pp]*primes[pp]<=x;pp++){
                if(x%primes[pp]==0){
                    freq[primes[pp]]++;
                    while(x%primes[pp]==0){
                        x/=primes[pp];
                    }
                }
            }
            if(x!=1){
                freq[x]++;
            }
        }
 
        bool ok=false;
        for(auto p:freq){
            if(p.second>1){
                ok=true;
                break;
            }
        }
 
       if ok YES
        else NO
